from db import db       # import SQLAlchemy


# The model for the item. The 'item' database holds 7 columns: id, name, description, category_id, user_id,
# created date, updated date.
# Id is the id of the item, which will be generated by server. name is the name of the item, description is more
# details about the item, and category_id is the id of the category item belongs to, all are chosen by
# the user upon creating the entry. user_id is the id of the creator of the item (user must be logged in to
# create the item, and only the item creator can delete/edit that entry). Created is the date the item
# was created, and updated date is latest time when the item data was updated
class ItemModel(db.Model):
    __tablename__ = 'item'                                              # initialize table
    id = db.Column(db.Integer, primary_key=True, nullable=False)        # generated id of the item
    name = db.Column(db.String(80), nullable=False)                     # name of the item
    description = db.Column(db.String(200), nullable=True)              # description of the item
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'), nullable=False)   # category that item belong to
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)           # creator of the item
    created = db.Column(db.DateTime(timezone=True), server_default=db.func.now(),
                        nullable=False)                                 # created date of the category
    updated = db.Column(db.DateTime(timezone=True), server_default=db.func.now(),
                        onupdate=db.func.now(), nullable=False)         # updated date of the category
    category = db.relationship('CategoryModel')                     # relationship declaration with category
    user = db.relationship('UserModel')                             # relationship declaration with user

    # initialization function
    def __init__(self, name, description, category_id, user_id):
        self.name = name                            # set name, description, category, user_id as given
        self.description = description
        self.category_id = category_id
        self.user_id = user_id

    # find the item object by (unique) id
    @classmethod
    def find_by_id(cls, item_id):
        return cls.query.filter_by(id=item_id).first()

    # find all of the items
    @classmethod
    def find_all(cls):
        return cls.query.all()

    # save item to database
    def save_to_db(self):
        db.session.add(self)                # add the item to database
        db.session.commit()                 # commit changes

    # delete item from database
    def delete_from_db(self):
        db.session.delete(self)             # delete the item from database
        db.session.commit()                 # commit changes

        # return json with item id, name, description, id of category and of user, created and updated date.
        # def json(self):
        #     return {'id': self.id, 'name': self.name, 'description': self.description,
        #             'category_id': self.category_id, 'user_id': self.user_id,
        #             'create': str(self.created), 'update': str(self.updated)}
