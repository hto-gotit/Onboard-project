# SQLAlchemy
from db import db


# The model for the item. The 'item' database holds 7 columns: id, name,
# description, category_id, user_id, created date, updated date.
# Id is the id of the item, which will be generated by server.
# Name is the name of the item
# Description is more details about the item
# Category_id is the id of the category item belongs to
# User_id is the id of the creator of the item (user must be logged in to
# create the item, and only the item creator can delete/edit that entry).
# Created is the date the item was created
# Updated date is latest time when the item data was updated
class ItemModel(db.Model):
    # initialize table
    __tablename__ = 'item'
    # generated id of the item
    id = db.Column(db.Integer, primary_key=True, nullable=False)
    # name of the item
    name = db.Column(db.String(80), nullable=False)
    # description of the item
    description = db.Column(db.String(200), nullable=True)
    # category that item belong to
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'),
                            nullable=False)
    # creator of the item
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    # created date of the category
    created = db.Column(db.DateTime(),
                        server_default=db.func.now(),
                        nullable=False)
    # updated date of the category
    updated = db.Column(db.DateTime(),
                        server_default=db.func.now(),
                        onupdate=db.func.now(),
                        nullable=False)
    # relationship declaration with category
    category = db.relationship('CategoryModel')
    # relationship declaration with user
    user = db.relationship('UserModel')

    # initialization function
    def __init__(self, name, description, category_id, user_id):
        # set name, description, category, user_id as given
        self.name = name
        self.description = description
        self.category_id = category_id
        self.user_id = user_id

    # find the item object by (unique) id
    @classmethod
    def find_by_id(cls, item_id):
        return cls.query.filter_by(id=item_id).first()

    # find items in a category by name
    @classmethod
    def find_by_category_and_name(cls, category_id, item_name):
        return cls.query.filter_by(category_id=category_id,
                                   name=item_name).first()

    # find all of the items
    @classmethod
    def find_all(cls, limit, offset, order):
        if order == 'asc':
            return cls.query.order_by(db.asc(cls.id))\
                .offset(offset).limit(limit)
        elif order == 'desc':
            return cls.query.order_by(db.desc(cls.id)).\
                offset(offset).limit(limit)

    # save item to database
    def save_to_db(self):
        db.session.add(self)                # add the item to database
        db.session.commit()                 # commit changes

    # delete item from database
    def delete_from_db(self):
        db.session.delete(self)             # delete the item from database
        db.session.commit()                 # commit changes
