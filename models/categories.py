# SQLAlchemy
from db import db


# The model for the category. The 'category' database holds 4 columns:
# id, name, created date, updated date.
# Id is the id of the category, which will be generated by server.
# Name is the name of the category.
# Created is the date the item was created
# Updated date is latest time when the item data was updated
# For this project, the categories will be hard-coded into the database
# and cannot be manipulated by users.
class CategoryModel(db.Model):
    __tablename__ = 'category'      # initialize the table
    # id of the category
    id = db.Column(db.Integer, primary_key=True, nullable=False)
    # name of the category
    name = db.Column(db.String(80), nullable=False, unique=True)
    # created date of the category
    created = db.Column(db.DateTime(),
                        server_default=db.func.now(),
                        nullable=False)
    # updated date of the category
    updated = db.Column(db.DateTime(),
                        server_default=db.func.now(),
                        onupdate=db.func.now(),
                        nullable=False)
    # items belonging to the category
    items = db.relationship('ItemModel', lazy='dynamic')

    # initialization function
    def __init__(self, name):
        self.name = name            # set name as given

    # find the category by (unique) id
    @classmethod
    def find_by_id(cls, category_id):
        return cls.query.filter_by(id=category_id).first()

    # find the all of the categories
    @classmethod
    def find_all(cls):
        return cls.query.all()

    # save item to database
    def save_to_db(self):
        db.session.add(self)                # add the category to database
        db.session.commit()                 # commit changes

    # delete item from database
    def delete_from_db(self):
        db.session.delete(self)             # delete the category from database
        db.session.commit()                 # commit changes
